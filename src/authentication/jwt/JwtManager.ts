/***************************************************************************************************
 *
 * This file is part of the Cooking Forum web application created by Alessio De Biasi.
 *
 * The Cooking Forum web application is free software: you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by the Free Software Foundation,
 * either version 3 of the License, or (at your option) any later version.
 *
 * The Cooking Forum web application is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
 * PURPOSE. See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with the Cooking Forum
 * web application. If not, see <http://www.gnu.org/licenses/>.
 *
 * Copyright Â© Alessio De Biasi, 2023.
 *
 **************************************************************************************************/

import jwt from "jsonwebtoken";
import {JwtSessionData} from "./JwtSessionData";

/**
 * Class managing JSON Web Tokens.
 */
export class JwtManager {
    /**
     * Secret key used to sign and verify JWTs.
     */
    private readonly secretKey: string;

    /**
     * Duration, in seconds, after which a JWT is considered expired.
     */
    private readonly sessionDuration: number;

    /**
     * Issuer of the JWT.
     */
    private readonly issuer: string | undefined;

    /**
     * Creates a new object that manages JWTs.
     *
     * @param secretKey Secret key used to sign and verify JWTs.
     * @param sessionDuration Duration, in seconds, after which a newly generated JWT is considered
     *     expired.
     * @param issuer String identifying the issuer of the JWT, so to reject JWTs generated by other
     *     webapps.
     */
    constructor(secretKey: string, sessionDuration: number, issuer: string | undefined) {
        this.secretKey = secretKey;
        this.sessionDuration = sessionDuration;
        this.issuer = issuer;
    }

    /**
     * Generates a new JWT wrapping the specified session data.
     *
     * @param payload The session data to wrap in the JWT token.
     * @returns The generated JWT token.
     */
    public createJwt(payload: JwtSessionData): string {
        return jwt.sign(payload, this.secretKey, {
            expiresIn: this.sessionDuration,
            issuer: this.issuer
        });
    }
}
